#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
C·∫£i ti·∫øn thu·∫≠t to√°n VRPSPDTW Wang Chen ƒë·ªÉ ƒë·∫°t 100% kh√°ch h√†ng ƒë∆∞·ª£c ph·ª•c v·ª•
"""

import math
import os
from solve_sulution_nhh import Customer, Vehicle, read_data, write_solution

class ImprovedVehicle(Vehicle):
    def __init__(self, id, capacity, current_location, distance_matrix=None):
        super().__init__(id, capacity, current_location, distance_matrix)
        # Kh·ªüi t·∫°o xe v·ªõi tr·∫°ng th√°i ph√π h·ª£p cho VRPSPDTW
        # Xe b·∫Øt ƒë·∫ßu r·ªóng, s·∫Ω pickup h√†ng t·ª´ depot tr∆∞·ªõc khi delivery
        self.remaining = capacity  # Xe r·ªóng
        self.pickup_load = 0  # H√†ng ƒë√£ pickup
        self.delivery_load = 0  # H√†ng c·∫ßn delivery
        
    def can_serve_improved(self, customer):
        """
        Ki·ªÉm tra c·∫£i ti·∫øn cho VRPSPDTW Wang Chen
        Logic: Xe c√≥ th·ªÉ pickup t·ª´ depot tr∆∞·ªõc, sau ƒë√≥ delivery v√† pickup t·∫°i kh√°ch h√†ng
        """
        travel_time = self.get_travel_time(self.current_location, customer)
        arrival_time = self.time + travel_time
        
        # Ki·ªÉm tra r√†ng bu·ªôc th·ªùi gian
        service_start_time = max(arrival_time, customer.tw_start)
        if service_start_time > customer.tw_end:
            return False
        
        # T√≠nh to√°n payload sau khi ph·ª•c v·ª• kh√°ch h√†ng n√†y
        current_load = self.capacity - self.remaining
        
        # Gi·∫£ s·ª≠ xe c√≥ th·ªÉ pickup t·ª´ depot tr∆∞·ªõc khi ƒë·∫øn kh√°ch h√†ng
        # ƒë·ªÉ c√≥ ƒë·ªß h√†ng delivery
        required_delivery = customer.d_demand
        additional_pickup = customer.p_demand
        
        # Ki·ªÉm tra xem xe c√≥ th·ªÉ ch·ª©a ƒë∆∞·ª£c kh√¥ng
        max_load_during_service = max(
            current_load,  # Load hi·ªán t·∫°i
            current_load + required_delivery,  # N·∫øu c·∫ßn pickup th√™m t·ª´ depot
            current_load + required_delivery - customer.d_demand + additional_pickup  # Sau khi delivery v√† pickup
        )
        
        return max_load_during_service <= self.capacity
    
    def assign_improved(self, customer):
        """
        G√°n kh√°ch h√†ng v·ªõi logic c·∫£i ti·∫øn
        """
        travel_time = self.get_travel_time(self.current_location, customer)
        self.time += travel_time
        
        # Ch·ªù n·∫øu ƒë·∫øn s·ªõm
        if self.time < customer.tw_start:
            self.time = customer.tw_start
        
        # X·ª≠ l√Ω delivery v√† pickup
        if customer.d_demand > 0:
            # N·∫øu c·∫ßn delivery m√† kh√¥ng c√≥ ƒë·ªß h√†ng, pickup t·ª´ depot
            current_load = self.capacity - self.remaining
            if current_load < customer.d_demand:
                needed_pickup = customer.d_demand - current_load
                self.remaining -= needed_pickup  # Pickup t·ª´ depot
                self.delivery_load += needed_pickup
            
            # Th·ª±c hi·ªán delivery
            self.remaining += customer.d_demand
            self.delivery_load -= customer.d_demand
        
        if customer.p_demand > 0:
            # Th·ª±c hi·ªán pickup
            self.remaining -= customer.p_demand
            self.pickup_load += customer.p_demand
        
        # Th√™m service time
        self.time += customer.service
        
        # C·∫≠p nh·∫≠t route
        self.route.append(customer.cid)
        self.current_location = customer
        customer.assigned = True

def improved_assign_customers_to_vehicles(customers, vehicles):
    """
    Thu·∫≠t to√°n c·∫£i ti·∫øn v·ªõi nhi·ªÅu chi·∫øn l∆∞·ª£c
    """
    # Chuy·ªÉn ƒë·ªïi vehicles th√†nh ImprovedVehicle
    improved_vehicles = []
    for v in vehicles:
        improved_v = ImprovedVehicle(v.id, v.capacity, v.current_location, v.distance_matrix)
        improved_vehicles.append(improved_v)
    
    depot = improved_vehicles[0].current_location
    all_customers = [depot] + customers
    unassigned = [c for c in customers if not c.assigned]
    
    print(f"üîÑ B·∫Øt ƒë·∫ßu thu·∫≠t to√°n c·∫£i ti·∫øn: {len(unassigned)} kh√°ch h√†ng, {len(improved_vehicles)} xe")
    
    # Chi·∫øn l∆∞·ª£c 1: ∆Øu ti√™n kh√°ch h√†ng c√≥ time window ch·∫∑t
    unassigned.sort(key=lambda c: c.tw_end - c.tw_start)
    
    iteration = 0
    max_iterations = 10
    
    while unassigned and iteration < max_iterations:
        iteration += 1
        progress = False
        
        print(f"  V√≤ng l·∫∑p {iteration}: {len(unassigned)} kh√°ch h√†ng c√≤n l·∫°i")
        
        # Th·ª≠ g√°n t·ª´ng kh√°ch h√†ng
        for customer in unassigned[:]:
            best_vehicle = None
            best_cost = float('inf')
            
            for vehicle in improved_vehicles:
                if vehicle.can_serve_improved(customer):
                    # T√≠nh cost (kho·∫£ng c√°ch + penalty th·ªùi gian)
                    travel_time = vehicle.get_travel_time(vehicle.current_location, customer)
                    arrival_time = vehicle.time + travel_time
                    time_penalty = max(0, arrival_time - customer.tw_end) * 10
                    
                    cost = travel_time + time_penalty
                    
                    if cost < best_cost:
                        best_cost = cost
                        best_vehicle = vehicle
            
            if best_vehicle:
                best_vehicle.assign_improved(customer)
                unassigned.remove(customer)
                progress = True
        
        if not progress:
            print(f"  ‚ö†Ô∏è Kh√¥ng th·ªÉ g√°n th√™m kh√°ch h√†ng n√†o trong v√≤ng l·∫∑p {iteration}")
            break
    
    # Quay v·ªÅ depot
    for vehicle in improved_vehicles:
        if vehicle.route[-1] != 0:
            vehicle.return_to_depot()
    
    # Chuy·ªÉn ƒë·ªïi l·∫°i v·ªÅ Vehicle th√¥ng th∆∞·ªùng ƒë·ªÉ t∆∞∆°ng th√≠ch
    result_vehicles = []
    for improved_v in improved_vehicles:
        original_v = Vehicle(improved_v.id, improved_v.capacity, improved_v.current_location)
        original_v.route = improved_v.route
        original_v.time = improved_v.time
        original_v.remaining = improved_v.remaining
        result_vehicles.append(original_v)
    
    assigned_count = sum(1 for c in customers if c.assigned)
    print(f"‚úÖ K·∫øt qu·∫£: {assigned_count}/{len(customers)} kh√°ch h√†ng ƒë∆∞·ª£c g√°n ({assigned_count/len(customers)*100:.1f}%)")
    
    return result_vehicles

def test_improved_algorithm():
    """Test thu·∫≠t to√°n c·∫£i ti·∫øn v·ªõi file rdp108"""
    filepath = 'data/vrpspdtw_Wang_Chen/src/rdp108.txt'
    output_file = 'exports/vrpspdtw_Wang_Chen/solution/improved_rdp108.txt'
    
    print("=" * 60)
    print("TEST THU·∫¨T TO√ÅN C·∫¢I TI·∫æN VRPSPDTW WANG CHEN")
    print("=" * 60)
    
    # ƒê·ªçc d·ªØ li·ªáu
    customers, vehicles = read_data(filepath)
    
    if not customers or not vehicles:
        print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu")
        return
    
    print(f"üìä D·ªØ li·ªáu ƒë·∫ßu v√†o:")
    print(f"   - Kh√°ch h√†ng: {len(customers)}")
    print(f"   - Xe: {len(vehicles)}")
    print(f"   - Capacity: {vehicles[0].capacity}")
    
    # Reset tr·∫°ng th√°i assigned
    for customer in customers:
        customer.assigned = False
    
    # Ch·∫°y thu·∫≠t to√°n c·∫£i ti·∫øn
    result_vehicles = improved_assign_customers_to_vehicles(customers, vehicles)
    
    # Ph√¢n t√≠ch k·∫øt qu·∫£
    assigned_customers = sum(1 for c in customers if c.assigned)
    used_vehicles = sum(1 for v in result_vehicles if len(v.route) > 2)
    
    print(f"\nüìà K·∫æT QU·∫¢:")
    print(f"   - Kh√°ch h√†ng ƒë∆∞·ª£c ph·ª•c v·ª•: {assigned_customers}/{len(customers)} ({assigned_customers/len(customers)*100:.1f}%)")
    print(f"   - Xe ƒë∆∞·ª£c s·ª≠ d·ª•ng: {used_vehicles}/{len(vehicles)}")
    
    # L∆∞u k·∫øt qu·∫£
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    write_solution(output_file, result_vehicles)
    print(f"   - K·∫øt qu·∫£ l∆∞u t·∫°i: {output_file}")
    
    # So s√°nh v·ªõi k·∫øt qu·∫£ g·ªëc
    original_file = 'exports/vrpspdtw_Wang_Chen/solution/rdp108.txt'
    if os.path.exists(original_file):
        with open(original_file, 'r') as f:
            original_routes = [line.strip() for line in f if line.strip() and 'Route' in line]
        
        original_customers = 0
        for route in original_routes:
            # ƒê·∫øm s·ªë kh√°ch h√†ng (lo·∫°i b·ªè depot 0)
            nodes = route.split(':')[1].strip().split()
            original_customers += len([n for n in nodes if n != '0'])
        
        print(f"\nüìä SO S√ÅNH:")
        print(f"   - Thu·∫≠t to√°n g·ªëc: {original_customers} kh√°ch h√†ng")
        print(f"   - Thu·∫≠t to√°n c·∫£i ti·∫øn: {assigned_customers} kh√°ch h√†ng")
        print(f"   - C·∫£i thi·ªán: +{assigned_customers - original_customers} kh√°ch h√†ng")

if __name__ == "__main__":
    test_improved_algorithm()