#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
from solve_sulution_nhh import read_data, assign_customers_to_vehicles, write_solution

def test_explicit_rcdp():
    """Test c√°c file explicit rcdp c√≥ v·∫•n ƒë·ªÅ"""
    
    test_files = [
        'data/vrpspdtw_Wang_Chen/src/explicit_rcdp0501.txt',
        'data/vrpspdtw_Wang_Chen/src/explicit_rcdp0504.txt', 
        'data/vrpspdtw_Wang_Chen/src/explicit_rcdp0507.txt'
    ]
    
    for filepath in test_files:
        print(f"\n{'='*60}")
        print(f"üîç KI·ªÇM TRA FILE: {os.path.basename(filepath)}")
        print(f"{'='*60}")
        
        try:
            # ƒê·ªçc d·ªØ li·ªáu
            customers, vehicles = read_data(filepath)
            
            if not customers or not vehicles:
                print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ {filepath}")
                continue
            
            print(f"üìÅ File: {os.path.basename(filepath)}")
            print(f"üë• Kh√°ch h√†ng: {len(customers)}")
            print(f"üöõ Xe c√≥ s·∫µn: {len(vehicles)}")
            print(f"üìç Depot: ({vehicles[0].current_location.x}, {vehicles[0].current_location.y})")
            print(f"üí∞ Dung l∆∞·ª£ng xe: {vehicles[0].capacity}")
            
            # In th√¥ng tin kh√°ch h√†ng
            print(f"\nüìã TH√îNG TIN KH√ÅCH H√ÄNG:")
            for i, customer in enumerate(customers):
                cid = getattr(customer, 'id', getattr(customer, 'cid', i+1))
                print(f"   Customer {cid}: d_demand={customer.d_demand}, p_demand={customer.p_demand}, tw=[{customer.ready_time}, {customer.due_time}]")
            
            # Ch·∫°y thu·∫≠t to√°n
            print(f"\nüîÑ Ch·∫°y thu·∫≠t to√°n...")
            vehicles_result = assign_customers_to_vehicles(customers, vehicles)
            
            # Ki·ªÉm tra k·∫øt qu·∫£
            assigned_customers = sum(1 for v in vehicles_result for _ in v.route[1:-1])
            used_vehicles = sum(1 for v in vehicles_result if len(v.route) > 2)
            
            print(f"\nüìä K·∫æT QU·∫¢:")
            print(f"   ‚úÖ Kh√°ch h√†ng ƒë∆∞·ª£c g√°n: {assigned_customers}/{len(customers)} ({assigned_customers/len(customers)*100:.1f}%)")
            print(f"   üöõ Xe ƒë∆∞·ª£c s·ª≠ d·ª•ng: {used_vehicles}/{len(vehicles)} ({used_vehicles/len(vehicles)*100:.1f}%)")
            
            # In chi ti·∫øt route
            print(f"\nüõ£Ô∏è CHI TI·∫æT ROUTES:")
            for i, vehicle in enumerate(vehicles_result):
                if len(vehicle.route) > 2:  # C√≥ kh√°ch h√†ng
                    route_str = " -> ".join(str(getattr(c, 'id', getattr(c, 'cid', 'depot'))) for c in vehicle.route)
                    print(f"   Vehicle {vehicle.id}: {route_str}")
            
            # L∆∞u k·∫øt qu·∫£
            output_file = f"exports/vrpspdtw_Wang_Chen/solution/{os.path.basename(filepath)}"
            write_solution(output_file, vehicles_result)
            print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£: {output_file}")
            
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω {filepath}: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    test_explicit_rcdp()