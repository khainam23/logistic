package org.logistic.algorithm.aco;

import org.logistic.algorithm.aco.AntColonyOptimization;
import org.logistic.algorithm.sa.SimulatedAnnealing;
import org.logistic.data.ReadDataFromFile;
import org.logistic.model.Location;
import org.logistic.model.Route;
import org.logistic.model.Solution;
import org.logistic.util.CheckConditionUtil;
import org.logistic.util.FitnessUtil;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

/**
 * Test ƒë·ªÉ ch·∫°y Ant Colony Optimization v√† thu th·∫≠p ƒëi·ªÉm s·ªë
 */
public class AntColonyOptimizationScoreTest {

    public static void main(String[] args) {
        System.out.println("=== TEST ANT COLONY OPTIMIZATION - THU TH·∫¨P ƒêI·ªÇM S·ªê ===\n");

        // S·ªë l·∫ßn ch·∫°y cho m·ªói test case
        int numberOfRuns = 5;

        // Ch·∫°y test v·ªõi c√°c b·ªô d·ªØ li·ªáu kh√°c nhau
        runMultipleTests("data/vrptw/src/c101.txt", "data/vrptw/solution/c101.txt", "VRPTW", "c101", numberOfRuns);
        // runMultipleTests("data/vrptw/src/r203.txt", "data/vrptw/solution/r203.txt",
        // "VRPTW", "r203", numberOfRuns);
    }

    /**
     * Ch·∫°y nhi·ªÅu l·∫ßn test v√† thu th·∫≠p th·ªëng k√™
     */
    private static void runMultipleTests(String dataFile, String solutionFile, String problemType, String testName,
            int numberOfRuns) {
        System.out.println("üîÑ Ch·∫°y " + numberOfRuns + " l·∫ßn test cho: " + testName + " (" + problemType + ")");
        System.out.println("üìÅ Data file: " + dataFile);
        System.out.println("üìÅ Solution file: " + solutionFile);
        System.out.println("=" + "=".repeat(80));

        // M·∫£ng l∆∞u k·∫øt qu·∫£ c√°c l·∫ßn ch·∫°y
        double[] finalFitnesses = new double[numberOfRuns];
        double[] runTimes = new double[numberOfRuns];
        double[] improvements = new double[numberOfRuns];
        Solution[] bestSolutions = new Solution[numberOfRuns];

        // ƒê·ªçc d·ªØ li·ªáu m·ªôt l·∫ßn (d√πng chung cho t·∫•t c·∫£ c√°c l·∫ßn ch·∫°y)
        ReadDataFromFile dataReader = new ReadDataFromFile();
        ReadDataFromFile.ProblemType type;
        switch (problemType) {
            case "VRPTW":
                type = ReadDataFromFile.ProblemType.VRPTW;
                break;
            case "VRPSPDTW_LIU":
                type = ReadDataFromFile.ProblemType.VRPSPDTW_LIU_TANG_YAO;
                break;
            default:
                System.out.println("‚ùå Lo·∫°i b√†i to√°n kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: " + problemType);
                return;
        }

        dataReader.readProblemData(dataFile, type);
        Location[] locations = dataReader.getLocations();
        int maxCapacity = dataReader.getMaxCapacity();

        if (locations == null) {
            System.out.println("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´: " + dataFile);
            return;
        }

        // ƒê·ªçc solution ban ƒë·∫ßu
        dataReader.readSolution(solutionFile);
        Route[] initialRoutes = dataReader.getRoutes();

        if (initialRoutes == null || initialRoutes.length == 0) {
            System.out.println("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c solution t·ª´: " + solutionFile);
            return;
        }

        // Kh·ªüi t·∫°o utilities
        FitnessUtil fitnessUtil = FitnessUtil.getInstance();
        CheckConditionUtil checkConditionUtil = CheckConditionUtil.getInstance();

        // T√≠nh fitness ban ƒë·∫ßu
        double originalFitness = fitnessUtil.calculatorFitness(initialRoutes, locations);
        System.out.println("üéØ Fitness g·ªëc: " + String.format("%.2f", originalFitness));
        System.out.println();

        // Ch·∫°y nhi·ªÅu l·∫ßn
        for (int run = 1; run <= numberOfRuns; run++) {
            System.out.println("üèÉ‚Äç‚ôÇÔ∏è === L·∫¶N CH·∫†Y " + run + "/" + numberOfRuns + " ===");

            long startTime = System.currentTimeMillis();

            // T·∫°o initial solutions cho l·∫ßn ch·∫°y n√†y
            Solution[] initialSolutions = generateInitialSolutions(initialRoutes, locations, fitnessUtil,
                    checkConditionUtil, maxCapacity);

            // T√¨m best initial fitness
            double bestInitialFitness = Double.MAX_VALUE;
            for (Solution sol : initialSolutions) {
                if (sol.getFitness() < bestInitialFitness) {
                    bestInitialFitness = sol.getFitness();
                }
            }

            // Ch·∫°y ACO
            AntColonyOptimization aco = new AntColonyOptimization();
            Solution result = aco.run(initialSolutions, fitnessUtil, checkConditionUtil, locations, maxCapacity);

            long endTime = System.currentTimeMillis();
            double runTime = (endTime - startTime) / 1000.0;

            // L∆∞u k·∫øt qu·∫£
            finalFitnesses[run - 1] = result.getFitness();
            runTimes[run - 1] = runTime;
            improvements[run - 1] = bestInitialFitness - result.getFitness();
            bestSolutions[run - 1] = result;

            System.out.println("‚úÖ L·∫ßn " + run + " - Fitness: " + String.format("%.2f", result.getFitness()) +
                    " - Th·ªùi gian: " + String.format("%.2f", runTime) + "s" +
                    " - C·∫£i thi·ªán: " + String.format("%.2f", improvements[run - 1]));
            System.out.println();
        }

        // Ph√¢n t√≠ch th·ªëng k√™ t·ªïng h·ª£p
        analyzeMultipleRunsStatistics(finalFitnesses, runTimes, improvements, bestSolutions, originalFitness, testName,
                problemType);

        // L∆∞u k·∫øt qu·∫£ t·ªïng h·ª£p
        saveMultipleRunsResults(finalFitnesses, runTimes, improvements, bestSolutions, originalFitness, testName,
                problemType, locations);

        System.out.println("=" + "=".repeat(80) + "\n");
    }

    /**
     * T·∫°o nhi·ªÅu initial solutions b·∫±ng SA
     */
    private static Solution[] generateInitialSolutions(Route[] initialRoutes, Location[] locations,
            FitnessUtil fitnessUtil, CheckConditionUtil checkConditionUtil,
            int maxCapacity) {
        int numSolutions = 5; // T·∫°o 5 initial solutions
        Solution[] solutions = new Solution[numSolutions];

        // Solution ƒë·∫ßu ti√™n l√† solution g·ªëc
        double initialFitness = fitnessUtil.calculatorFitness(initialRoutes, locations);
        solutions[0] = new Solution(initialRoutes, initialFitness);

        // T·∫°o c√°c solutions kh√°c b·∫±ng SA
        for (int i = 1; i < numSolutions; i++) {
            // Copy routes ƒë·ªÉ tr√°nh modify original
            Route[] copiedRoutes = new Route[initialRoutes.length];
            for (int j = 0; j < initialRoutes.length; j++) {
                copiedRoutes[j] = new Route();
                copiedRoutes[j].setUse(initialRoutes[j].isUse());
                copiedRoutes[j].setIndLocations(initialRoutes[j].getIndLocations().clone());
                copiedRoutes[j].calculateDistance(locations);
            }

            Solution copiedSolution = new Solution(copiedRoutes,
                    fitnessUtil.calculatorFitness(copiedRoutes, locations));
            SimulatedAnnealing sa = new SimulatedAnnealing(copiedSolution);

            // Ch·∫°y SA v·ªõi √≠t iterations ƒë·ªÉ t·∫°o diversity
            solutions[i] = sa.run(new Solution[] { copiedSolution }, fitnessUtil, checkConditionUtil, locations,
                    maxCapacity);
        }

        return solutions;
    }

    /**
     * Ph√¢n t√≠ch th·ªëng k√™ t·ª´ nhi·ªÅu l·∫ßn ch·∫°y
     */
    private static void analyzeMultipleRunsStatistics(double[] finalFitnesses, double[] runTimes, double[] improvements,
            Solution[] bestSolutions, double originalFitness, String testName, String problemType) {
        System.out.println("üìä === TH·ªêNG K√ä T·ªîNG H·ª¢P " + finalFitnesses.length + " L·∫¶N CH·∫†Y ===");

        // T√≠nh to√°n th·ªëng k√™ fitness
        double bestFitness = Double.MAX_VALUE;
        double worstFitness = Double.MIN_VALUE;
        double totalFitness = 0;
        int bestRunIndex = 0;

        for (int i = 0; i < finalFitnesses.length; i++) {
            totalFitness += finalFitnesses[i];
            if (finalFitnesses[i] < bestFitness) {
                bestFitness = finalFitnesses[i];
                bestRunIndex = i;
            }
            if (finalFitnesses[i] > worstFitness) {
                worstFitness = finalFitnesses[i];
            }
        }

        double avgFitness = totalFitness / finalFitnesses.length;

        // T√≠nh ƒë·ªô l·ªách chu·∫©n fitness
        double sumSquaredDiff = 0;
        for (double fitness : finalFitnesses) {
            sumSquaredDiff += Math.pow(fitness - avgFitness, 2);
        }
        double stdDevFitness = Math.sqrt(sumSquaredDiff / finalFitnesses.length);

        // T√≠nh to√°n th·ªëng k√™ th·ªùi gian ch·∫°y
        double totalTime = 0;
        double minTime = Double.MAX_VALUE;
        double maxTime = Double.MIN_VALUE;

        for (double time : runTimes) {
            totalTime += time;
            if (time < minTime)
                minTime = time;
            if (time > maxTime)
                maxTime = time;
        }

        double avgTime = totalTime / runTimes.length;

        // T√≠nh to√°n th·ªëng k√™ c·∫£i thi·ªán
        double totalImprovement = 0;
        double bestImprovement = Double.MIN_VALUE;
        double worstImprovement = Double.MAX_VALUE;
        int positiveImprovements = 0;

        for (double improvement : improvements) {
            totalImprovement += improvement;
            if (improvement > bestImprovement)
                bestImprovement = improvement;
            if (improvement < worstImprovement)
                worstImprovement = improvement;
            if (improvement > 0)
                positiveImprovements++;
        }

        double avgImprovement = totalImprovement / improvements.length;

        // In k·∫øt qu·∫£ th·ªëng k√™
        System.out.println("\nüéØ TH·ªêNG K√ä FITNESS:");
        System.out
                .println("  üèÜ T·ªët nh·∫•t: " + String.format("%.2f", bestFitness) + " (l·∫ßn " + (bestRunIndex + 1) + ")");
        System.out.println("  üìä Trung b√¨nh: " + String.format("%.2f", avgFitness));
        System.out.println("  üìâ T·ªá nh·∫•t: " + String.format("%.2f", worstFitness));
        System.out.println("  üìè ƒê·ªô l·ªách chu·∫©n: " + String.format("%.2f", stdDevFitness));
        System.out.println("  üéØ Fitness g·ªëc: " + String.format("%.2f", originalFitness));

        System.out.println("\n‚è±Ô∏è  TH·ªêNG K√ä TH·ªúI GIAN:");
        System.out.println("  ‚ö° Nhanh nh·∫•t: " + String.format("%.2f", minTime) + "s");
        System.out.println("  üìä Trung b√¨nh: " + String.format("%.2f", avgTime) + "s");
        System.out.println("  üêå Ch·∫≠m nh·∫•t: " + String.format("%.2f", maxTime) + "s");
        System.out.println("  üïê T·ªïng th·ªùi gian: " + String.format("%.2f", totalTime) + "s");

        System.out.println("\nüìà TH·ªêNG K√ä C·∫¢I THI·ªÜN:");
        System.out.println("  üèÜ C·∫£i thi·ªán t·ªët nh·∫•t: " + String.format("%.2f", bestImprovement));
        System.out.println("  üìä C·∫£i thi·ªán trung b√¨nh: " + String.format("%.2f", avgImprovement));
        System.out.println("  üìâ C·∫£i thi·ªán t·ªá nh·∫•t: " + String.format("%.2f", worstImprovement));
        System.out.println("  ‚úÖ S·ªë l·∫ßn c·∫£i thi·ªán: " + positiveImprovements + "/" + improvements.length +
                " (" + String.format("%.1f%%", (positiveImprovements * 100.0 / improvements.length)) + ")");

        // So s√°nh v·ªõi fitness g·ªëc
        double avgImprovementFromOriginal = originalFitness - avgFitness;
        double bestImprovementFromOriginal = originalFitness - bestFitness;

        System.out.println("\nüîç SO S√ÅNH V·ªöI FITNESS G·ªêC:");
        System.out.println("  üìà C·∫£i thi·ªán trung b√¨nh: " + String.format("%.2f", avgImprovementFromOriginal) +
                " (" + String.format("%.2f%%", (avgImprovementFromOriginal / originalFitness) * 100) + ")");
        System.out.println("  üèÜ C·∫£i thi·ªán t·ªët nh·∫•t: " + String.format("%.2f", bestImprovementFromOriginal) +
                " (" + String.format("%.2f%%", (bestImprovementFromOriginal / originalFitness) * 100) + ")");

        // ƒê√°nh gi√° t·ªïng th·ªÉ
        System.out.println("\nüéØ ƒê√ÅNH GI√Å T·ªîNG TH·ªÇ:");
        double successRate = (positiveImprovements * 100.0 / improvements.length);
        if (successRate >= 80 && avgImprovement > 0) {
            System.out.println("‚úÖ ACO ho·∫°t ƒë·ªông r·∫•t ·ªïn ƒë·ªãnh v√† hi·ªáu qu·∫£!");
        } else if (successRate >= 60 && avgImprovement > 0) {
            System.out.println("‚úÖ ACO ho·∫°t ƒë·ªông t·ªët v·ªõi ƒë·ªô ·ªïn ƒë·ªãnh kh√°!");
        } else if (successRate >= 40) {
            System.out.println("‚ö†Ô∏è  ACO ho·∫°t ƒë·ªông kh√¥ng ·ªïn ƒë·ªãnh, c·∫ßn ƒëi·ªÅu ch·ªânh tham s·ªë!");
        } else {
            System.out.println("‚ùå ACO ho·∫°t ƒë·ªông k√©m, c·∫ßn xem x√©t l·∫°i thu·∫≠t to√°n!");
        }

        System.out.println("  üìä T·ª∑ l·ªá th√†nh c√¥ng: " + String.format("%.1f%%", successRate));
        System.out.println("  üéØ ƒê·ªô ·ªïn ƒë·ªãnh: " + (stdDevFitness < (avgFitness * 0.05) ? "Cao"
                : stdDevFitness < (avgFitness * 0.1) ? "Trung b√¨nh" : "Th·∫•p"));

        // In chi ti·∫øt solution t·ªët nh·∫•t
        System.out.println("\nüèÜ CHI TI·∫æT SOLUTION T·ªêT NH·∫§T (L·∫ßn " + (bestRunIndex + 1) + "):");
        printSolutionDetails(bestSolutions[bestRunIndex]);
    }

    /**
     * In chi ti·∫øt solution
     */
    private static void printSolutionDetails(Solution solution) {
        Route[] routes = solution.getRoutes();
        int usedRoutes = 0;

        System.out.println("üõ£Ô∏è  T·ªïng s·ªë routes: " + routes.length);

        for (int i = 0; i < routes.length; i++) {
            if (routes[i].isUse()) {
                usedRoutes++;
                int[] locations = routes[i].getIndLocations();
                System.out.println("  Route " + (i + 1) + ": " + Arrays.toString(locations) +
                        " (length: " + locations.length +
                        ", distance: " + String.format("%.2f", routes[i].getDistance()) + ")");
            }
        }

        System.out.println("üöõ S·ªë routes ƒë∆∞·ª£c s·ª≠ d·ª•ng: " + usedRoutes);
    }

    /**
     * L∆∞u k·∫øt qu·∫£ nhi·ªÅu l·∫ßn ch·∫°y ra file
     */
    private static void saveMultipleRunsResults(double[] finalFitnesses, double[] runTimes, double[] improvements,
            Solution[] bestSolutions, double originalFitness, String testName,
            String problemType, Location[] locations) {
        String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String filename = "exports/ACO_MultipleRuns_" + testName + "_" + timestamp + ".txt";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            writer.write("=== ANT COLONY OPTIMIZATION MULTIPLE RUNS TEST RESULTS ===\n");
            writer.write("Test Name: " + testName + "\n");
            writer.write("Problem Type: " + problemType + "\n");
            writer.write("Timestamp: " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "\n");
            writer.write("Number of Runs: " + finalFitnesses.length + "\n");
            writer.write("Number of Locations: " + locations.length + "\n");
            writer.write("Original Fitness: " + String.format("%.2f", originalFitness) + "\n\n");

            // T√≠nh to√°n th·ªëng k√™
            double bestFitness = Double.MAX_VALUE;
            double worstFitness = Double.MIN_VALUE;
            double totalFitness = 0;
            double totalTime = 0;
            double totalImprovement = 0;
            int bestRunIndex = 0;
            int positiveImprovements = 0;

            for (int i = 0; i < finalFitnesses.length; i++) {
                totalFitness += finalFitnesses[i];
                totalTime += runTimes[i];
                totalImprovement += improvements[i];

                if (finalFitnesses[i] < bestFitness) {
                    bestFitness = finalFitnesses[i];
                    bestRunIndex = i;
                }
                if (finalFitnesses[i] > worstFitness) {
                    worstFitness = finalFitnesses[i];
                }
                if (improvements[i] > 0) {
                    positiveImprovements++;
                }
            }

            double avgFitness = totalFitness / finalFitnesses.length;
            double avgTime = totalTime / runTimes.length;
            double avgImprovement = totalImprovement / improvements.length;

            // T√≠nh ƒë·ªô l·ªách chu·∫©n
            double sumSquaredDiff = 0;
            for (double fitness : finalFitnesses) {
                sumSquaredDiff += Math.pow(fitness - avgFitness, 2);
            }
            double stdDevFitness = Math.sqrt(sumSquaredDiff / finalFitnesses.length);

            // Ghi th·ªëng k√™ t·ªïng h·ª£p
            writer.write("STATISTICAL SUMMARY:\n");
            writer.write("Best Fitness: " + String.format("%.2f", bestFitness) + " (Run " + (bestRunIndex + 1) + ")\n");
            writer.write("Average Fitness: " + String.format("%.2f", avgFitness) + "\n");
            writer.write("Worst Fitness: " + String.format("%.2f", worstFitness) + "\n");
            writer.write("Standard Deviation: " + String.format("%.2f", stdDevFitness) + "\n");
            writer.write("Average Runtime: " + String.format("%.2f", avgTime) + " seconds\n");
            writer.write("Total Runtime: " + String.format("%.2f", totalTime) + " seconds\n");
            writer.write("Average Improvement: " + String.format("%.2f", avgImprovement) + "\n");
            writer.write("Success Rate: " + positiveImprovements + "/" + finalFitnesses.length +
                    " (" + String.format("%.1f%%", (positiveImprovements * 100.0 / finalFitnesses.length)) + ")\n\n");

            // Ghi chi ti·∫øt t·ª´ng l·∫ßn ch·∫°y
            writer.write("DETAILED RESULTS BY RUN:\n");
            for (int i = 0; i < finalFitnesses.length; i++) {
                writer.write("Run " + (i + 1) + ":\n");
                writer.write("  Final Fitness: " + String.format("%.2f", finalFitnesses[i]) + "\n");
                writer.write("  Runtime: " + String.format("%.2f", runTimes[i]) + " seconds\n");
                writer.write("  Improvement: " + String.format("%.2f", improvements[i]) + "\n");
                writer.write("  Improvement %: " + String.format("%.2f%%",
                        improvements[i] > 0 ? (improvements[i] / (finalFitnesses[i] + improvements[i])) * 100 : 0)
                        + "\n");
                writer.write("\n");
            }

            // Ghi chi ti·∫øt solution t·ªët nh·∫•t
            writer.write("BEST SOLUTION DETAILS (Run " + (bestRunIndex + 1) + "):\n");
            Route[] bestRoutes = bestSolutions[bestRunIndex].getRoutes();
            int usedRoutes = 0;

            for (int i = 0; i < bestRoutes.length; i++) {
                if (bestRoutes[i].isUse()) {
                    usedRoutes++;
                    writer.write("Route " + (i + 1) + ": " + Arrays.toString(bestRoutes[i].getIndLocations()) +
                            " (distance: " + String.format("%.2f", bestRoutes[i].getDistance()) + ")\n");
                }
            }

            writer.write("Total Routes Used: " + usedRoutes + "\n");

            // So s√°nh v·ªõi fitness g·ªëc
            double bestImprovementFromOriginal = originalFitness - bestFitness;
            double avgImprovementFromOriginal = originalFitness - avgFitness;

            writer.write("\nCOMPARISON WITH ORIGINAL:\n");
            writer.write("Best Improvement: " + String.format("%.2f", bestImprovementFromOriginal) +
                    " (" + String.format("%.2f%%", (bestImprovementFromOriginal / originalFitness) * 100) + ")\n");
            writer.write("Average Improvement: " + String.format("%.2f", avgImprovementFromOriginal) +
                    " (" + String.format("%.2f%%", (avgImprovementFromOriginal / originalFitness) * 100) + ")\n");

            System.out.println("üìÅ ƒê√£ l∆∞u k·∫øt qu·∫£ t·ªïng h·ª£p v√†o: " + filename);

        } catch (IOException e) {
            System.out.println("‚ùå L·ªói khi l∆∞u file: " + e.getMessage());
        }
    }
}