
import math
import os

class Customer:
    def __init__(self, cid, x, y, d_demand, p_demand, ready, due, service):
        self.cid = cid
        self.x = x
        self.y = y
        self.d_demand = d_demand
        self.p_demand = p_demand
        self.tw_start = ready
        self.tw_end = due
        self.service = service
        self.assigned = False

    def distance_to(self, other):
        return math.hypot(self.x - other.x, self.y - other.y)

class Vehicle:
    def __init__(self, id, capacity, current_location):
        self.id = id
        self.capacity = capacity
        self.remaining = capacity
        self.route = [0]  # depot
        self.current_location = current_location  # depot
        self.time = 0

    def can_serve(self, customer):
        travel_time = self.current_location.distance_to(customer)
        arrival_time = self.time + travel_time
        # Ki·ªÉm tra n·∫øu xe c√≥ th·ªÉ ƒë·∫øn kh√°ch h√†ng trong c·ª≠a s·ªï th·ªùi gian
        within_tw = customer.tw_start <= arrival_time <= customer.tw_end
        # Ki·ªÉm tra n·∫øu xe c√≥ ƒë·ªß dung l∆∞·ª£ng ƒë·ªÉ ph·ª•c v·ª• kh√°ch h√†ng (ch·ªâ ki·ªÉm tra delivery demand)
        can_serve = self.remaining >= customer.d_demand and within_tw
        return can_serve

    def assign(self, customer):
        travel_time = self.current_location.distance_to(customer)
        self.time += travel_time
        self.time = max(self.time, customer.tw_start)  # ƒê·∫£m b·∫£o xe ƒë·∫øn sau th·ªùi gian s·∫µn s√†ng
        self.time += customer.service  # Th·ªùi gian ph·ª•c v·ª• kh√°ch h√†ng
        self.remaining -= customer.d_demand  # Gi·∫£m dung l∆∞·ª£ng c·ªßa xe
        self.route.append(customer.cid)  # Th√™m kh√°ch h√†ng v√†o tuy·∫øn ƒë∆∞·ªùng
        self.current_location = customer  # C·∫≠p nh·∫≠t v·ªã tr√≠ c·ªßa xe
        customer.assigned = True

    def return_to_depot(self):
        self.route.append(0)  # Quay l·∫°i ƒëi·ªÉm xu·∫•t ph√°t (depot)

# greedy algorithm
def assign_customers_to_vehicles(customers, vehicles):
    unassigned = [c for c in customers if not c.assigned]

    while unassigned:
        progress = False
        for vehicle in vehicles:
            best_customer = None
            best_distance = float('inf')
            for customer in unassigned:
                if vehicle.can_serve(customer):
                    dist = vehicle.current_location.distance_to(customer)
                    if dist < best_distance:
                        best_distance = dist
                        best_customer = customer
            if best_customer:
                vehicle.assign(best_customer)
                unassigned.remove(best_customer)
                progress = True
        if not progress:
            break  # N·∫øu kh√¥ng c√≥ ti·∫øn b·ªô, tho√°t kh·ªèi v√≤ng l·∫∑p

    # Quay v·ªÅ depot khi ƒë√£ ho√†n th√†nh c√°c tuy·∫øn ƒë∆∞·ªùng
    for vehicle in vehicles:
        if vehicle.route[-1] != 0:
            vehicle.return_to_depot()

    return vehicles

def detect_file_format(lines):
    """Ph√°t hi·ªán ƒë·ªãnh d·∫°ng file d·ª±a tr√™n n·ªôi dung"""
    # Ki·ªÉm tra c√°c ƒë·ªãnh d·∫°ng file
    for i, line in enumerate(lines):
        if 'VEHICLE' in line and i < 10:
            return 'VRPTW'
    
    # N·∫øu d√≤ng ƒë·∫ßu ch·ªâ c√≥ 3 s·ªë th√¨ c√≥ th·ªÉ l√† PDPTW
    first_line_parts = lines[0].split()
    if len(first_line_parts) >= 3 and first_line_parts[0].isdigit():
        return 'PDPTW'
    
    return 'UNKNOWN'

def read_vrptw_format(lines):
    """ƒê·ªçc ƒë·ªãnh d·∫°ng VRPTW (c101.txt style)"""
    customers = []
    vehicles = []
    
    # T√¨m th√¥ng tin xe
    for i, line in enumerate(lines):
        if 'NUMBER' in line and 'CAPACITY' in line:
            vehicle_info_line = lines[i + 1]
            num_vehicles, capacity = map(int, vehicle_info_line.split())
            break
    
    # T√¨m d·ªØ li·ªáu kh√°ch h√†ng
    customer_data_start = None
    for i, line in enumerate(lines):
        if 'CUST NO.' in line:
            customer_data_start = i + 2  # B·ªè qua d√≤ng tr·ªëng
            break
    
    if customer_data_start:
        for line in lines[customer_data_start:]:
            parts = line.split()
            if len(parts) >= 7:
                cid = int(parts[0])
                x = float(parts[1])
                y = float(parts[2])
                d_demand = float(parts[3])
                p_demand = 0  # VRPTW kh√¥ng c√≥ pickup demand
                ready = float(parts[4])
                due = float(parts[5])
                service = float(parts[6])
                
                customers.append(Customer(cid, x, y, d_demand, p_demand, ready, due, service))
    
    # T·∫°o xe
    for i in range(1, num_vehicles + 1):
        vehicles.append(Vehicle(i, capacity, customers[0]))
    
    customers.pop(0)  # Lo·∫°i b·ªè depot kh·ªèi danh s√°ch kh√°ch h√†ng
    return customers, vehicles



def read_pdptw_format(lines):
    """ƒê·ªçc ƒë·ªãnh d·∫°ng PDPTW (lc101.txt style)"""
    customers = []
    vehicles = []
    
    # D√≤ng ƒë·∫ßu ti√™n ch·ª©a th√¥ng tin c∆° b·∫£n
    first_line = lines[0].split()
    num_vehicles = int(first_line[0])
    capacity = int(first_line[1])
    
    # ƒê·ªçc d·ªØ li·ªáu kh√°ch h√†ng
    for line in lines[1:]:
        parts = line.split()
        if len(parts) >= 7:
            cid = int(parts[0])
            x = float(parts[1])
            y = float(parts[2])
            demand = float(parts[3])  # C√≥ th·ªÉ √¢m ho·∫∑c d∆∞∆°ng
            ready = float(parts[4])
            due = float(parts[5])
            service = float(parts[6])
            
            # X·ª≠ l√Ω demand: n·∫øu √¢m th√¨ l√† delivery demand, n·∫øu d∆∞∆°ng th√¨ l√† pickup demand
            if demand < 0:
                d_demand = abs(demand)
                p_demand = 0
            else:
                d_demand = 0
                p_demand = demand
            
            customers.append(Customer(cid, x, y, d_demand, p_demand, ready, due, service))
    
    # T·∫°o xe
    for i in range(1, num_vehicles + 1):
        vehicles.append(Vehicle(i, capacity, customers[0]))
    
    customers.pop(0)  # Lo·∫°i b·ªè depot kh·ªèi danh s√°ch kh√°ch h√†ng
    return customers, vehicles

def read_data(filepath):
    """H√†m ƒë·ªçc d·ªØ li·ªáu t·ªïng qu√°t - t·ª± ƒë·ªông ph√°t hi·ªán ƒë·ªãnh d·∫°ng file"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            lines = [line.strip() for line in f if line.strip()]
        
        if not lines:
            print(f"File {filepath} tr·ªëng ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c")
            return [], []
        
        # Ph√°t hi·ªán ƒë·ªãnh d·∫°ng file
        file_format = detect_file_format(lines)
        print(f"Ph√°t hi·ªán ƒë·ªãnh d·∫°ng file: {file_format}")
        
        # ƒê·ªçc d·ªØ li·ªáu theo ƒë·ªãnh d·∫°ng ph√π h·ª£p
        if file_format == 'VRPTW':
            return read_vrptw_format(lines)
        elif file_format == 'PDPTW':
            return read_pdptw_format(lines)
        else:
            print(f"Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng file {filepath}")
            # Th·ª≠ ƒë·ªçc nh∆∞ PDPTW format (ƒë·ªãnh d·∫°ng ƒë∆°n gi·∫£n nh·∫•t)
            try:
                return read_pdptw_format(lines)
            except:
                print(f"Kh√¥ng th·ªÉ ƒë·ªçc file {filepath}")
                return [], []
                
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc file {filepath}: {str(e)}")
        return [], []

def write_solution(filename, vehicles):
    """Ghi k·∫øt qu·∫£ gi·∫£i thu·∫≠t ra file"""
    with open(filename, 'w', encoding='utf-8') as f:
        for vehicle in vehicles:
            route_str = ' '.join(map(str, vehicle.route))
            f.write(f"Route {vehicle.id}: {route_str}\n")

def print_file_info(customers, vehicles, filename):
    """In th√¥ng tin v·ªÅ file v·ª´a x·ª≠ l√Ω"""
    print(f"  üìÅ File: {os.path.basename(filename)}")
    print(f"  üë• Kh√°ch h√†ng: {len(customers)}")
    print(f"  üöõ Xe c√≥ s·∫µn: {len(vehicles)}")
    if vehicles:
        depot = vehicles[0].current_location
        print(f"  üìç Depot: ({depot.x}, {depot.y})")
        print(f"  üí∞ Dung l∆∞·ª£ng xe: {vehicles[0].capacity}")
    print(f"  ‚è∞ Th·ªùi gian x·ª≠ l√Ω: ", end="")

def process_directory(src_dir, solution_dir):
    """X·ª≠ l√Ω t·∫•t c·∫£ file trong m·ªôt th∆∞ m·ª•c"""
    if not os.path.exists(src_dir):
        print(f"‚ùå Th∆∞ m·ª•c {src_dir} kh√¥ng t·ªìn t·∫°i")
        return
    
    # T·∫°o th∆∞ m·ª•c solution n·∫øu ch∆∞a c√≥
    os.makedirs(solution_dir, exist_ok=True)
    
    processed_count = 0
    error_count = 0
    
    txt_files = [f for f in os.listdir(src_dir) if f.endswith('.txt') and os.path.isfile(os.path.join(src_dir, f))]
    
    if not txt_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file .txt n√†o trong th∆∞ m·ª•c {src_dir}")
        return
    
    print(f"üìÇ T√¨m th·∫•y {len(txt_files)} file .txt")
    
    for i, fname in enumerate(txt_files, 1):
        src_path = os.path.join(src_dir, fname)
        
        print(f"\n[{i}/{len(txt_files)}] üîÑ ƒêang x·ª≠ l√Ω...")
        
        import time
        start_time = time.time()
        
        customers, vehicles = read_data(src_path)
        
        if not customers or not vehicles:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ file {fname}")
            error_count += 1
            continue
        
        # In th√¥ng tin file
        print_file_info(customers, vehicles, fname)
        
        # Gi·∫£i thu·∫≠t
        vehicles_and_way = assign_customers_to_vehicles(customers, vehicles)
        
        # L∆∞u k·∫øt qu·∫£
        solution_path = os.path.join(solution_dir, fname)
        write_solution(solution_path, vehicles_and_way)
        
        # T√≠nh th·ªùi gian x·ª≠ l√Ω
        processing_time = time.time() - start_time
        print(f"{processing_time:.2f}s")
        
        # Th·ªëng k√™ k·∫øt qu·∫£
        used_vehicles = sum(1 for v in vehicles_and_way if len(v.route) > 2)
        assigned_customers = sum(1 for c in customers if c.assigned)
        
        print(f"  ‚úÖ K·∫øt qu·∫£:")
        print(f"     - Xe s·ª≠ d·ª•ng: {used_vehicles}/{len(vehicles)}")
        print(f"     - Kh√°ch h√†ng ƒë∆∞·ª£c ph·ª•c v·ª•: {assigned_customers}/{len(customers)}")
        print(f"     - File k·∫øt qu·∫£: {os.path.basename(solution_path)}")
        
        processed_count += 1
    
    print(f"\n{'='*50}")
    print(f"üéØ T·ªîNG K·∫æT TH∆ØM·ª§C")
    print(f"‚úÖ Th√†nh c√¥ng: {processed_count} file")
    print(f"‚ùå L·ªói: {error_count} file")
    if processed_count > 0:
        print(f"üìÅ K·∫øt qu·∫£ l∆∞u t·∫°i: {solution_dir}")
    print(f"{'='*50}")

# ƒê·ªãnh nghƒ©a c√°c th∆∞ m·ª•c d·ªØ li·ªáu
data_directories = [
    {
        'name': 'VRPTW',
        'src': r"D:\Logistic\excute_data\logistic\data\vrptw\src",
        'solution': r"D:\Logistic\excute_data\logistic\data\vrptw\solution"
    },
    {
        'name': 'PDPTW',
        'src': r"D:\Logistic\excute_data\logistic\data\pdptw\src",
        'solution': r"D:\Logistic\excute_data\logistic\data\pdptw\solution"
    }
]

# X·ª≠ l√Ω t·∫•t c·∫£ c√°c th∆∞ m·ª•c
for directory in data_directories:
    print(f"\n{'='*50}")
    print(f"X·ª¨ L√ù TH∆Ø M·ª§C: {directory['name']}")
    print(f"{'='*50}")
    
    process_directory(directory['src'], directory['solution'])