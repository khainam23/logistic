
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib.patches import Rectangle
import warnings
warnings.filterwarnings('ignore')

# Thi·∫øt l·∫≠p style cho matplotlib
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

class OptimizationResultsVisualizer:
    """
    L·ªõp tr·ª±c quan h√≥a k·∫øt qu·∫£ t·ªëi ∆∞u h√≥a v·ªõi nhi·ªÅu lo·∫°i bi·ªÉu ƒë·ªì kh√°c nhau
    """
    
    def __init__(self, excel_file="20250731_152032_optimization_results.xlsx"):
        """
        Kh·ªüi t·∫°o v√† ƒë·ªçc d·ªØ li·ªáu t·ª´ file Excel
        """
        self.excel_file = excel_file
        self.df_raw = None
        self.df_clean = None
        self.load_data()
        
    def load_data(self):
        """
        ƒê·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ file Excel
        """
        try:
            # ƒê·ªçc file Excel
            self.df_raw = pd.read_excel(self.excel_file, sheet_name="Optimization Results")
            
            # T·∫°o header t·ª´ d√≤ng ƒë·∫ßu ti√™n v√† l√†m s·∫°ch d·ªØ li·ªáu
            self.df_clean = self.df_raw[1:].copy()
            self.df_clean.columns = ['Instance', 'Algorithm', 'NV_Min', 'NV_Std', 'NV_Mean',
                                   'TC_Min', 'TC_Std', 'TC_Mean',
                                   'SD_Min', 'SD_Std', 'SD_Mean',
                                   'WT_Min', 'WT_Std', 'WT_Mean',
                                   'Time_ms']
            
            # √âp ki·ªÉu s·ªë cho c√°c c·ªôt s·ªë
            numeric_columns = self.df_clean.columns.drop(['Instance', 'Algorithm'])
            self.df_clean[numeric_columns] = self.df_clean[numeric_columns].apply(pd.to_numeric, errors='coerce')
            
            # Lo·∫°i b·ªè c√°c d√≤ng c√≥ gi√° tr·ªã NaN
            self.df_clean = self.df_clean.dropna()
            
            print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {len(self.df_clean)} d√≤ng d·ªØ li·ªáu")
            print(f"üìä C√°c instance: {self.df_clean['Instance'].unique()}")
            print(f"üîß C√°c thu·∫≠t to√°n: {self.df_clean['Algorithm'].unique()}")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc file: {e}")
    
    def plot_metrics_comparison(self, instance=None, save_fig=True):
        """
        So s√°nh c√°c ch·ªâ s·ªë cho m·ªôt instance c·ª• th·ªÉ ho·∫∑c t·∫•t c·∫£
        """
        if instance:
            subset = self.df_clean[self.df_clean['Instance'] == instance]
            title_suffix = f"cho {instance}"
        else:
            subset = self.df_clean
            title_suffix = "cho t·∫•t c·∫£ instances"
            
        if subset.empty:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho instance: {instance}")
            return
            
        metrics = ['TC_Mean', 'WT_Mean', 'Time_ms']
        melted = subset.melt(id_vars=['Algorithm', 'Instance'], value_vars=metrics,
                           var_name='Metric', value_name='Value')
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle(f'üìä So s√°nh c√°c ch·ªâ s·ªë t·ªëi ∆∞u h√≥a {title_suffix}', fontsize=16, fontweight='bold')
        
        # Bi·ªÉu ƒë·ªì c·ªôt nh√≥m
        ax1 = axes[0, 0]
        sns.barplot(data=melted, x='Algorithm', y='Value', hue='Metric', ax=ax1)
        ax1.set_title('üìà So s√°nh theo thu·∫≠t to√°n')
        ax1.set_xlabel('Thu·∫≠t to√°n')
        ax1.set_ylabel('Gi√° tr·ªã')
        ax1.tick_params(axis='x', rotation=45)
        
        # Bi·ªÉu ƒë·ªì boxplot
        ax2 = axes[0, 1]
        sns.boxplot(data=melted, x='Metric', y='Value', hue='Algorithm', ax=ax2)
        ax2.set_title('üì¶ Ph√¢n ph·ªëi gi√° tr·ªã theo ch·ªâ s·ªë')
        ax2.set_xlabel('Ch·ªâ s·ªë')
        ax2.set_ylabel('Gi√° tr·ªã')
        
        # Bi·ªÉu ƒë·ªì violin
        ax3 = axes[1, 0]
        sns.violinplot(data=melted, x='Algorithm', y='Value', hue='Metric', ax=ax3)
        ax3.set_title('üéª Ph√¢n ph·ªëi m·∫≠t ƒë·ªô')
        ax3.set_xlabel('Thu·∫≠t to√°n')
        ax3.set_ylabel('Gi√° tr·ªã')
        ax3.tick_params(axis='x', rotation=45)
        
        # Heatmap correlation
        ax4 = axes[1, 1]
        if instance:
            corr_data = subset[['TC_Mean', 'WT_Mean', 'Time_ms', 'NV_Mean']].corr()
        else:
            corr_data = self.df_clean[['TC_Mean', 'WT_Mean', 'Time_ms', 'NV_Mean']].corr()
        sns.heatmap(corr_data, annot=True, cmap='coolwarm', center=0, ax=ax4)
        ax4.set_title('üî• Ma tr·∫≠n t∆∞∆°ng quan')
        
        plt.tight_layout()
        
        if save_fig:
            filename = f"metrics_comparison_{instance if instance else 'all'}.png"
            plt.savefig(filename, dpi=300, bbox_inches='tight')
            print(f"üíæ ƒê√£ l∆∞u bi·ªÉu ƒë·ªì: {filename}")
        
        plt.show()
    
    def plot_algorithm_performance(self, save_fig=True):
        """
        Ph√¢n t√≠ch hi·ªáu su·∫•t t·ªïng th·ªÉ c·ªßa c√°c thu·∫≠t to√°n
        """
        fig, axes = plt.subplots(2, 3, figsize=(18, 12))
        fig.suptitle('üöÄ Ph√¢n t√≠ch hi·ªáu su·∫•t thu·∫≠t to√°n t·ªëi ∆∞u h√≥a', fontsize=16, fontweight='bold')
        
        # 1. Th·ªùi gian th·ª±c thi trung b√¨nh
        ax1 = axes[0, 0]
        avg_time = self.df_clean.groupby('Algorithm')['Time_ms'].mean().sort_values()
        bars1 = ax1.bar(range(len(avg_time)), avg_time.values, color=sns.color_palette("viridis", len(avg_time)))
        ax1.set_title('‚è±Ô∏è Th·ªùi gian th·ª±c thi TB')
        ax1.set_xlabel('Thu·∫≠t to√°n')
        ax1.set_ylabel('Th·ªùi gian (ms)')
        ax1.set_xticks(range(len(avg_time)))
        ax1.set_xticklabels(avg_time.index, rotation=45)
        
        # Th√™m gi√° tr·ªã l√™n c·ªôt
        for i, bar in enumerate(bars1):
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + height*0.01,
                    f'{height:.0f}', ha='center', va='bottom')
        
        # 2. Chi ph√≠ t·ªïng trung b√¨nh
        ax2 = axes[0, 1]
        avg_cost = self.df_clean.groupby('Algorithm')['TC_Mean'].mean().sort_values()
        bars2 = ax2.bar(range(len(avg_cost)), avg_cost.values, color=sns.color_palette("plasma", len(avg_cost)))
        ax2.set_title('üí∞ Chi ph√≠ t·ªïng TB')
        ax2.set_xlabel('Thu·∫≠t to√°n')
        ax2.set_ylabel('Chi ph√≠')
        ax2.set_xticks(range(len(avg_cost)))
        ax2.set_xticklabels(avg_cost.index, rotation=45)
        
        # 3. S·ªë xe trung b√¨nh
        ax3 = axes[0, 2]
        avg_vehicles = self.df_clean.groupby('Algorithm')['NV_Mean'].mean().sort_values()
        bars3 = ax3.bar(range(len(avg_vehicles)), avg_vehicles.values, color=sns.color_palette("crest", len(avg_vehicles)))
        ax3.set_title('üöõ S·ªë xe TB')
        ax3.set_xlabel('Thu·∫≠t to√°n')
        ax3.set_ylabel('S·ªë xe')
        ax3.set_xticks(range(len(avg_vehicles)))
        ax3.set_xticklabels(avg_vehicles.index, rotation=45)
        
        # 4. Scatter plot: Chi ph√≠ vs Th·ªùi gian
        ax4 = axes[1, 0]
        for alg in self.df_clean['Algorithm'].unique():
            alg_data = self.df_clean[self.df_clean['Algorithm'] == alg]
            ax4.scatter(alg_data['Time_ms'], alg_data['TC_Mean'], label=alg, alpha=0.7, s=60)
        ax4.set_title('‚ö° Chi ph√≠ vs Th·ªùi gian')
        ax4.set_xlabel('Th·ªùi gian (ms)')
        ax4.set_ylabel('Chi ph√≠ t·ªïng')
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        # 5. Hi·ªáu qu·∫£ t·ªïng h·ª£p (lower is better)
        ax5 = axes[1, 1]
        # Chu·∫©n h√≥a c√°c ch·ªâ s·ªë (0-1) v√† t√≠nh ƒëi·ªÉm t·ªïng h·ª£p
        normalized_data = self.df_clean.copy()
        for col in ['TC_Mean', 'Time_ms', 'NV_Mean']:
            normalized_data[f'{col}_norm'] = (normalized_data[col] - normalized_data[col].min()) / (normalized_data[col].max() - normalized_data[col].min())
        
        normalized_data['Efficiency_Score'] = (normalized_data['TC_Mean_norm'] + 
                                             normalized_data['Time_ms_norm'] + 
                                             normalized_data['NV_Mean_norm']) / 3
        
        efficiency = normalized_data.groupby('Algorithm')['Efficiency_Score'].mean().sort_values()
        bars5 = ax5.bar(range(len(efficiency)), efficiency.values, color=sns.color_palette("rocket", len(efficiency)))
        ax5.set_title('üéØ ƒêi·ªÉm hi·ªáu qu·∫£ t·ªïng h·ª£p')
        ax5.set_xlabel('Thu·∫≠t to√°n')
        ax5.set_ylabel('ƒêi·ªÉm hi·ªáu qu·∫£ (th·∫•p h∆°n = t·ªët h∆°n)')
        ax5.set_xticks(range(len(efficiency)))
        ax5.set_xticklabels(efficiency.index, rotation=45)
        
        # 6. Radar chart cho thu·∫≠t to√°n t·ªët nh·∫•t
        ax6 = axes[1, 2]
        best_alg = efficiency.index[0]  # Thu·∫≠t to√°n c√≥ ƒëi·ªÉm hi·ªáu qu·∫£ th·∫•p nh·∫•t
        best_data = self.df_clean[self.df_clean['Algorithm'] == best_alg][['TC_Mean', 'Time_ms', 'NV_Mean', 'WT_Mean']].mean()
        
        categories = ['TC_Mean', 'Time_ms', 'NV_Mean', 'WT_Mean']
        values = [best_data[cat] for cat in categories]
        
        # Chu·∫©n h√≥a gi√° tr·ªã cho radar chart
        max_vals = [self.df_clean[cat].max() for cat in categories]
        normalized_values = [val/max_val for val, max_val in zip(values, max_vals)]
        
        angles = np.linspace(0, 2*np.pi, len(categories), endpoint=False).tolist()
        normalized_values += normalized_values[:1]  # ƒê√≥ng v√≤ng tr√≤n
        angles += angles[:1]
        
        ax6.plot(angles, normalized_values, 'o-', linewidth=2, label=best_alg)
        ax6.fill(angles, normalized_values, alpha=0.25)
        ax6.set_xticks(angles[:-1])
        ax6.set_xticklabels(categories)
        ax6.set_title(f'üéØ Profile thu·∫≠t to√°n t·ªët nh·∫•t: {best_alg}')
        ax6.grid(True)
        
        plt.tight_layout()
        
        if save_fig:
            filename = "algorithm_performance_analysis.png"
            plt.savefig(filename, dpi=300, bbox_inches='tight')
            print(f"üíæ ƒê√£ l∆∞u bi·ªÉu ƒë·ªì: {filename}")
        
        plt.show()
    
    def plot_instance_analysis(self, save_fig=True):
        """
        Ph√¢n t√≠ch hi·ªáu su·∫•t theo t·ª´ng instance
        """
        instances = self.df_clean['Instance'].unique()
        n_instances = len(instances)
        
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('üìã Ph√¢n t√≠ch hi·ªáu su·∫•t theo Instance', fontsize=16, fontweight='bold')
        
        # 1. Heatmap chi ph√≠ theo instance v√† thu·∫≠t to√°n
        ax1 = axes[0, 0]
        pivot_cost = self.df_clean.pivot_table(values='TC_Mean', index='Instance', columns='Algorithm', aggfunc='mean')
        sns.heatmap(pivot_cost, annot=True, fmt='.0f', cmap='YlOrRd', ax=ax1)
        ax1.set_title('üî• Chi ph√≠ t·ªïng theo Instance & Thu·∫≠t to√°n')
        
        # 2. Heatmap th·ªùi gian th·ª±c thi
        ax2 = axes[0, 1]
        pivot_time = self.df_clean.pivot_table(values='Time_ms', index='Instance', columns='Algorithm', aggfunc='mean')
        sns.heatmap(pivot_time, annot=True, fmt='.0f', cmap='Blues', ax=ax2)
        ax2.set_title('‚è±Ô∏è Th·ªùi gian th·ª±c thi theo Instance & Thu·∫≠t to√°n')
        
        # 3. Bi·ªÉu ƒë·ªì c·ªôt x·∫øp ch·ªìng - s·ªë xe
        ax3 = axes[1, 0]
        pivot_vehicles = self.df_clean.pivot_table(values='NV_Mean', index='Instance', columns='Algorithm', aggfunc='mean')
        pivot_vehicles.plot(kind='bar', stacked=False, ax=ax3, width=0.8)
        ax3.set_title('üöõ S·ªë xe trung b√¨nh theo Instance')
        ax3.set_xlabel('Instance')
        ax3.set_ylabel('S·ªë xe')
        ax3.legend(title='Thu·∫≠t to√°n', bbox_to_anchor=(1.05, 1), loc='upper left')
        ax3.tick_params(axis='x', rotation=45)
        
        # 4. Scatter plot: ƒê·ªô kh√≥ c·ªßa instance
        ax4 = axes[1, 1]
        instance_difficulty = self.df_clean.groupby('Instance').agg({
            'TC_Mean': 'mean',
            'Time_ms': 'mean',
            'NV_Mean': 'mean'
        })
        
        scatter = ax4.scatter(instance_difficulty['Time_ms'], instance_difficulty['TC_Mean'], 
                            s=instance_difficulty['NV_Mean']*50, alpha=0.6, c=range(len(instance_difficulty)), 
                            cmap='viridis')
        
        # Th√™m label cho t·ª´ng ƒëi·ªÉm
        for i, instance in enumerate(instance_difficulty.index):
            ax4.annotate(instance, (instance_difficulty.iloc[i]['Time_ms'], instance_difficulty.iloc[i]['TC_Mean']),
                        xytext=(5, 5), textcoords='offset points', fontsize=8)
        
        ax4.set_title('üéØ ƒê·ªô kh√≥ Instance (K√≠ch th∆∞·ªõc = S·ªë xe)')
        ax4.set_xlabel('Th·ªùi gian TB (ms)')
        ax4.set_ylabel('Chi ph√≠ TB')
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        if save_fig:
            filename = "instance_analysis.png"
            plt.savefig(filename, dpi=300, bbox_inches='tight')
            print(f"üíæ ƒê√£ l∆∞u bi·ªÉu ƒë·ªì: {filename}")
        
        plt.show()
    
    def generate_summary_report(self):
        """
        T·∫°o b√°o c√°o t·ªïng h·ª£p
        """
        print("="*60)
        print("üìä B√ÅO C√ÅO T·ªîNG H·ª¢P K·∫æT QU·∫¢ T·ªêI ∆ØU H√ìA")
        print("="*60)
        
        print(f"\nüìà TH·ªêNG K√ä T·ªîNG QUAN:")
        print(f"   ‚Ä¢ T·ªïng s·ªë th√≠ nghi·ªám: {len(self.df_clean)}")
        print(f"   ‚Ä¢ S·ªë instance: {len(self.df_clean['Instance'].unique())}")
        print(f"   ‚Ä¢ S·ªë thu·∫≠t to√°n: {len(self.df_clean['Algorithm'].unique())}")
        
        print(f"\nüèÜ THU·∫¨T TO√ÅN T·ªêT NH·∫§T THEO T·ª™NG CH·ªà S·ªê:")
        
        # Chi ph√≠ th·∫•p nh·∫•t
        best_cost = self.df_clean.loc[self.df_clean['TC_Mean'].idxmin()]
        print(f"   ‚Ä¢ Chi ph√≠ th·∫•p nh·∫•t: {best_cost['Algorithm']} ({best_cost['TC_Mean']:.2f}) - Instance: {best_cost['Instance']}")
        
        # Th·ªùi gian nhanh nh·∫•t
        best_time = self.df_clean.loc[self.df_clean['Time_ms'].idxmin()]
        print(f"   ‚Ä¢ Th·ªùi gian nhanh nh·∫•t: {best_time['Algorithm']} ({best_time['Time_ms']:.0f}ms) - Instance: {best_time['Instance']}")
        
        # S·ªë xe √≠t nh·∫•t
        best_vehicles = self.df_clean.loc[self.df_clean['NV_Mean'].idxmin()]
        print(f"   ‚Ä¢ S·ªë xe √≠t nh·∫•t: {best_vehicles['Algorithm']} ({best_vehicles['NV_Mean']:.1f}) - Instance: {best_vehicles['Instance']}")
        
        print(f"\nüìä TH·ªêNG K√ä THEO THU·∫¨T TO√ÅN:")
        alg_stats = self.df_clean.groupby('Algorithm').agg({
            'TC_Mean': ['mean', 'std', 'min', 'max'],
            'Time_ms': ['mean', 'std', 'min', 'max'],
            'NV_Mean': ['mean', 'std', 'min', 'max']
        }).round(2)
        
        for alg in self.df_clean['Algorithm'].unique():
            print(f"\n   üîß {alg}:")
            print(f"      - Chi ph√≠ TB: {alg_stats.loc[alg, ('TC_Mean', 'mean')]:.2f} ¬± {alg_stats.loc[alg, ('TC_Mean', 'std')]:.2f}")
            print(f"      - Th·ªùi gian TB: {alg_stats.loc[alg, ('Time_ms', 'mean')]:.0f} ¬± {alg_stats.loc[alg, ('Time_ms', 'std')]:.0f} ms")
            print(f"      - S·ªë xe TB: {alg_stats.loc[alg, ('NV_Mean', 'mean')]:.1f} ¬± {alg_stats.loc[alg, ('NV_Mean', 'std')]:.1f}")
        
        print("\n" + "="*60)
    
    def create_comprehensive_dashboard(self):
        """
        T·∫°o dashboard t·ªïng h·ª£p v·ªõi t·∫•t c·∫£ c√°c bi·ªÉu ƒë·ªì
        """
        print("üöÄ ƒêang t·∫°o dashboard t·ªïng h·ª£p...")
        
        # T·∫°o b√°o c√°o t·ªïng h·ª£p
        self.generate_summary_report()
        
        # T·∫°o c√°c bi·ªÉu ƒë·ªì
        print("\nüìä ƒêang t·∫°o bi·ªÉu ƒë·ªì ph√¢n t√≠ch hi·ªáu su·∫•t thu·∫≠t to√°n...")
        self.plot_algorithm_performance()
        
        print("\nüìã ƒêang t·∫°o bi·ªÉu ƒë·ªì ph√¢n t√≠ch theo instance...")
        self.plot_instance_analysis()
        
        print("\nüìà ƒêang t·∫°o bi·ªÉu ƒë·ªì so s√°nh ch·ªâ s·ªë...")
        self.plot_metrics_comparison()
        
        print("\n‚úÖ Ho√†n th√†nh t·∫°o dashboard!")

# S·ª≠ d·ª•ng l·ªõp OptimizationResultsVisualizer
if __name__ == "__main__":
    # Kh·ªüi t·∫°o visualizer
    visualizer = OptimizationResultsVisualizer()
    
    # T·∫°o dashboard t·ªïng h·ª£p
    visualizer.create_comprehensive_dashboard()
    
    # V√≠ d·ª• s·ª≠ d·ª•ng c√°c h√†m ri√™ng l·∫ª
    # visualizer.plot_metrics_comparison("c101.txt")  # So s√°nh cho instance c·ª• th·ªÉ
    # visualizer.plot_algorithm_performance()          # Ph√¢n t√≠ch hi·ªáu su·∫•t thu·∫≠t to√°n
    # visualizer.plot_instance_analysis()              # Ph√¢n t√≠ch theo instance
